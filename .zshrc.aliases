# --- Vars

THIS=$0
CONFIG="$HOME/.zshrc"
CONFIG_ALIAS="$THIS"
CONFIG_LOCAL="$HOME/.zshrc.local"

export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export EDITOR="nvim"

# --- Aliases

# SSH / Remote Machines
alias sk="kitty +kitten ssh"
alias ss="TERM=xterm ssh"
alias sc="$EDITOR $HOME/.ssh/config"
alias rsy="rsync -avzhP"

# ZSH
alias zconfig="$EDITOR $CONFIG"
alias zreload="source $CONFIG"
alias zlocal="$EDITOR $CONFIG_LOCAL"
alias zalias="$EDITOR $THIS"
alias zralias="source $CONFIG_ALIAS"
alias j="jobs -d"

# Navigation
alias ls="eza"
alias tree="eza --tree --group-directories-first --sort Name"
alias treee="tree --all"
alias treeg="treee --git-ignore --ignore-glob .git"

# Vim
alias v="$EDITOR"
alias vimrc="$EDITOR $HOME/.vimrc"

# Git
alias c="git checkout"
alias status="git status"
alias glog="git log --oneline"
alias gap="git add -p"
alias pull="git pull"
alias pullr="git pull --rebase"
alias push="git push"
alias pushf="git push --force-with-lease"
alias stash="git stash"
alias slist="git stash list -p"
alias pop="git stash pop"
alias cherp="git cherry-pick"
alias oops="git commit --amend"
alias conflicts="git diff --name-only --diff-filter=U | xargs $EDITOR"
alias pr="gh pr create --web"
alias submit="git pinit github && gh pr create --web"

# Node
alias npr="npm run"
alias scripts="jq '.scripts' package.json"

# Python
alias venv="source ./venv/bin/activate"
alias vnev="deactivate"
alias vnew="python -m venv ./venv"

# Docker
alias docks='docker ps -a --format "{{.Names}}😎{{.ID}}😎{{.Status}}😎{{.Image}}" \
	| sort \
	| awk -F"😎" '"'"'{ print "\x1b[1m"$1"\x1b[0m\x1e(\x1b[33m"$2"\x1b[0m)\x1e"$3"\x1b[0m\x1e\x1b[2m🍌"$4"\x1b[0m" }'"'"' \
	| sed -e $(echo "s/\x1eExited/\x1e\x1b[31mExited/") \
	| sed -e $(echo "s/\x1eUp/\x1e\x1b[32mUp/") \
	| sed -e "s/🍌.*://" \
	| sed -e "s/🍌//" \
	| column -s$(echo "\x1e") -t'

# AWS
alias awls="grep '^\[' ~/.aws/credentials | sed -e 's/^\[//' -e 's/\]$//'"

# --- Utility Functions

# Text Transforms
upper() {
    if [ -z $1 ]
    then
        cat /dev/stdin | tr "[:lower:]" "[:upper:]"
    else
        echo "$1" | tr "[:lower:]" "[:upper:]"
    fi
}
lower() {
    if [ -z $1 ]
    then
        cat /dev/stdin | tr "[:upper:]" "[:lower:]"
    else
        echo "$1" | tr "[:lower:]" "[:upper:]"
    fi
}
mask() {
	# masks a sensitive string such as a password
	# eg. `echo 'password' | mask` -> `p******d`
	local string=${1:-$(</dev/stdin)}
	local char_first="${string:0:1}"
	local chars_masked="${string:1:${#string}-2}"
	local char_last="${string:${#string}-1}"
	printf "%s%s%s\n" "$char_first" "${chars_masked//?/*}" "$char_last"
}

# URI Encoding
encodechar() {
    local char=$1
    printf '%%%02X' "'$char"
}
encodeuricomponent() {
    local string=${1:-$(</dev/stdin)}
    local len=${#string}
    local encoded=''

    local pos char
    for (( pos = 0; pos < len; pos++ )); do
        char=${string:$pos:1}
        if [[ $char =~ [-_.~a-zA-Z0-9] ]]; then
            encoded+=$char
        else
            encoded+=$(encodechar $char)
        fi
    done
    echo $encoded
}
decodeuricomponent() {
    local string=${1:-$(</dev/stdin)}
    printf '%b\n' "${string//%/\\x}"
}
base64url() {
	# https://stackoverflow.com/questions/55389211/string-based-data-encoding-base64-vs-base64url
	local encoded=$(base64 </dev/stdin)
	echo $encoded | sed -E 's/\+/-/g;s/\//_/g;s/=+//g'
}

# hacky interactive jq
jiq() {
	local file
	if [ -z $1 ]
	then
		file=$(mktemp)
		cat /dev/stdin > $file
	else file="$1"
	fi

	local cols=$(tput cols)
	local width=$(($cols - 4))

	local horizontal_separator=$(printf "%${width}s\n" | sed -e 's/ /⎯/g')
	local header="echo '\x1b[1m${file}\x1b[0m\n${horizontal_separator}'"
	local preview_original="cat $file | jq"
	local preview_filtered="cat $file | jq {q} -C 2>&1 | sed -e 's/^/\x1b[0m│ /' -e 's/$/\x1b[0m/'"
	local query=$(echo '' | fzf --print-query \
		--preview "cat <($header) <(/usr/bin/pr -m -t -n -w $width <($preview_original) <($preview_filtered))" \
		--preview-window="up,99%")

	echo "$query" 1>&2;
	jq "$query" "$file"
}

# Quicker CTRL-Z to fg
override_ctrl_z() {
	if [[ $#BUFFER -eq 0 ]]; 
	then
		BUFFER="fg";
		zle accept-line;
	else
		zle push-input;
		zle clear-screen;
	fi
}
zle -N override_ctrl_z
bindkey '' override_ctrl_z

# --- Cleanup

unset THIS;
