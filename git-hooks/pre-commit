#! /usr/bin/env node

// Git hook which attempts to run linting on the edited Javascript files

const {
	execSync,
	spawn,
} = require('child_process');
const {
	existsSync,
	readFileSync,
} = require('fs');
const {
	extname,
	join,
} = require('path');

const LINTABLE_FILES = new Set([
	'.js', '.jsx',
	'.ts', '.tsx',
]);

/** Runs a command synchronously, returns its output */
const get = (cmd) => execSync(cmd).toString( ).replace(/\n$/, '');
/** Runs a command asynchronously, returns its output */
const run = (cmd, args = [ ], {
	encoding = 'utf-8',
	env = { },
	...opts
} = { }) => new Promise(function run(resolve, reject) {
	const child = spawn(cmd, args, {
		...opts,
		env: { ...process.env, ...env },
	});
	/** @param {Buffer} */
	const parse = (buffer) => encoding ? buffer.toString(encoding) : buffer;

	const output = [ ];
	child.stdout.on('data', (data) => output.push({ stream: 'stdout', data }));
	child.stderr.on('data', (data) => output.push({ stream: 'stderr', data }));
	child.on('error', function handleChildError(err) {
		reject(err);
		if (!child.killed) child.kill;
	});
	child.on('close', (code) => resolve({
		status: code,
		stdout: parse(Buffer.concat(output.filter(e => e.stream === 'stdout').map(e => e.data))),
		stderr: parse(Buffer.concat(output.filter(e => e.stream === 'stderr').map(e => e.data))),
		output: parse(Buffer.concat(output.map(e => e.data))),
	}));
});

const originalProcess = process.ppid;
const originalCommand = get(`ps -ocommand= -p ${originalProcess}`);
const commitArguments = originalCommand.split(/\s/g);

const isColourSupported = process.stdout.isTTY;
const isQuiet = commitArguments.includes('--quiet');
const isAmend = commitArguments.includes('--amend');

/**
 * @template TReturn
 * @param {(str: string) => TReturn} func
 * @returns {(strings: TemplateStringsArray, ...interp: any[]) => TReturn}
 */
const tag = (func) => function tagged(strings, ...interp) {
	const concat = strings.reduce(function concatenate(concat, str, idx) {
		const hasInterp = interp.length > idx;
		if (!hasInterp) return `${concat}${str}`;
		else return `${concat}${str}${interp[idx]}`;
	}, '');
	return func(concat);
}
const colour = isColourSupported
	? (code) => tag((string) => `${code}${string}\x1b[0m`)
	: ( ) => tag((string) => string);
const bold    = colour('\x1b[1m');
const cyan    = colour('\x1b[36m');
const dim     = colour('\x1b[2m');
const green   = colour('\x1b[32m');
const magenta = colour('\x1b[35m');
const red     = colour('\x1b[31m');
const yellow  = colour('\x1b[33m');

const log = (...args) => isQuiet ? null : console.log(...args);
const newline = ( ) => log('');
const abort = (reason, details) => {
	console.error(bold`${red`Action aborted:`}`, red`${reason}`);
	if (!isQuiet && details != null) console.error(red`${details}`);
	process.exit(1);
}
process.on('uncaughtException', function handleException(err) {
	const stack = err instanceof Error ? err.stack : err;
	abort('Error running hook', stack);
});
process.on('unhandledRejection', function handleRejection(err) {
	const stack = err instanceof Error ? err.stack : err;
	abort('Error running hook', stack);
});

// Run git hook

newline( );
log(bold`=== GitHook:`, cyan`pre-commit`, bold`===`);

newline( ); // ---- Get repository metadata

log(dim`Getting repository root...`);
const repo = get('git rev-parse --show-toplevel');
log(dim`${repo}`);

log('Reading list of staged files...');
const filesIndexed = new Set(get('git ls-files -c').split('\n'));
const filesChanged = get('git diff --name-only --cached')
	.split('\n')
	.filter((f) => !!f.trim( ));

newline( ); // ---- Print out list of changed files:

const isEmpty = !isAmend && filesChanged.length === 0;
if (isEmpty) abort('No files staged');

const count = (files) => `${files.length} ${files.length === 1 ? 'file' : 'files'}`;
log(`${count(filesChanged)} changed:`);
for (const file of filesChanged) log(dim`${file}${filesIndexed.has(file) ? '' : '- DELETED'}`);

newline( ); // ---- Get and run the available scripts

log('Reading available scripts...');
const pathPackage = join(repo, './package.json');
const hasPackage  = existsSync(pathPackage);
if (!hasPackage) return log(yellow`No package.json found\n`);
const package = readFileSync(pathPackage, { encoding: 'utf-8' });
const scripts = JSON.parse(package)['scripts'] || { };

Promise.all([

	(async function lint( ) {
		const isLintingPossible = 'lint' in scripts;
		if (!isLintingPossible) return log(yellow`No lint script found`);

		const filesLintable = filesChanged.filter(function isLintable(file) {
			const extension = extname(file);
			const isLintable = LINTABLE_FILES.has(extension);
			const isDeleted  = !filesIndexed.has(file);
			return isLintable && !isDeleted;
		});
		if (!filesLintable.length) return log(yellow`No lintable changes.`);
		else log(dim`Linting ${count(filesLintable)}...`);

		const isESLint = scripts['lint'].startsWith('eslint');
		if (isESLint) log(dim`Running ESLint directly...`);

		const { status, output } = isESLint
			? await run('npx', [ 'eslint', ...filesLintable ])
			: await run('npm', [ 'run', 'lint', '--', ...filesLintable ]);
		if (status !== 0) abort('Linting failed', output);
		else log(magenta`Linting passed.`);
	})( ),

]).then(( ) => log(green`\nCommit approved.\n`));
